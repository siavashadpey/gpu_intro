CS 179: GPU Computing
Lab 1: Introduction to CUDA
Name:

================================================================================
Question 1: Common Errors (20 points)
================================================================================
This class will make heavy use of low-level C constructs and concepts,
especially pointers and memory management. 

As a "warm-up", here are a few quick samples of code and their intended
specifications. Each such piece of code is incorrect. Identify what is wrong
with the code, and how it should be fixed.

(Many of these problems allude to common errors encountered while writing both
GPU and CPU code.)

--------------------------------------------------------------------------------
1.1
--------------------------------------------------------------------------------
Creates an integer pointer, sets the value to which it points to 3, adds 2 to
this value, and prints said value.

void test1() {
    int *a = 3;
    *a = *a + 2;
    printf("%d\n", *a);
}

Issue:
"int *a = 3" is doing 2 things:
1) creating a pointer to an int (int *a)
2) assigning an int to a pointer (a = 3), but we cannot assign a type int to a type *int
(an address should be assigned to a)

Fix:
void test1() {
    int *a = (int *) malloc(sizeof (int));
   	*a = 3;
    *a = *a + 2;
    printf("%d\n", *a);
}

--------------------------------------------------------------------------------
1.2
--------------------------------------------------------------------------------
Creates two integer pointers and sets the values to which they point to 2 and 3,
respectively.

void test2() {
    int *a, b;
    a = (int *) malloc(sizeof (int));
    b = (int *) malloc(sizeof (int));

    if (!(a && b)) {
        printf("Out of memory\n");
        exit(-1);
    }
    *a = 2;
    *b = 3;
}

Issue:
int b -> int *b

Fix:
void test2() {
    int *a, *b;
    a = (int *) malloc(sizeof (int));
    b = (int *) malloc(sizeof (int));

    if (!(a && b)) {
        printf("Out of memory\n");
        exit(-1);
    }
    *a = 2;
    *b = 3;
}

--------------------------------------------------------------------------------
1.3
--------------------------------------------------------------------------------
Allocates an array of 1000 integers, and for i = 0, ..., 999, sets the i-th
element to i.

void test3() {
    int i, *a = (int *) malloc(1000);

    if (!a) {
        printf("Out of memory\n");
        exit(-1);
    }
    for (i = 0; i < 1000; i++)
        *(i + a) = i;
}

Issue:
malloc's syntax

Fix:
void test3() {
    int i, *a = (int *) malloc(1000 *sizeof(int));

    if (!a) {
        printf("Out of memory\n");
        exit(-1);
    }
    for (i = 0; i < 1000; i++)
        *(i + a) = i;
}

--------------------------------------------------------------------------------
1.4
--------------------------------------------------------------------------------
Creates a two-dimensional array of size 3x100, and sets element (1,1) (counting
from 0) to 5.

void test4() {
    int **a = (int **) malloc(3 * sizeof (int *));
    a[1][1] = 5;
}

Issue:
a[][] is a 1d-array of 1d-arrays and each of these arrays need to have memory allocated
to it.

Fix:
void test4() {
    int *a = (int *) malloc(3 * sizeof(int));
    for (int i = 0; i < 3; i++) {
    	a[i] = (int *) malloc(100 * sizeof(int));
    }
    a[1][1] = 5;
}

--------------------------------------------------------------------------------
1.5
--------------------------------------------------------------------------------
Sets the value pointed to by a to an input, checks if the value pointed to by a
is 0, and prints a message if it is.

void test5() {
    int *a = (int *) malloc(sizeof (int));
    scanf("%d", a);
    if (!a)
        printf("Value is 0\n");
}

Issue: 
Since a is a pointer to an address, "if !a" checks the address not a's value

Fix:

void test5() {
    int *a = (int *) malloc(sizeof (int));
    scanf("%d", a);
    if (!*a)
        printf("Value is 0\n");
}

================================================================================
Question 2: Parallelization (30 points)
================================================================================

--------------------------------------------------------------------------------
2.1
--------------------------------------------------------------------------------
Given an input signal x[n], suppose we have two output signals y_1[n] and
y_2[n], given by the difference equations: 
		y_1[n] = x[n - 1] + x[n] + x[n + 1]
		y_2[n] = y_2[n - 2] + y_2[n - 1] + x[n]

Which calculation do you expect will have an easier and faster implementation on
the GPU, and why?

First computation because the outputs are independent from each other, thus it
is embarrassingly parallel. The second computation depends on the previous 2 outputs.

--------------------------------------------------------------------------------
2.2
--------------------------------------------------------------------------------
In class, we discussed how the exponential moving average (EMA), in comparison
to the simple moving average (SMA), is much less suited for parallelization on
the GPU. 

Recall that the EMA is given by:
	y[n] = c * x[n] + (1 - c) * y[n - 1]

Suppose that c is close to 1, and we only require an approximation to y[n]. How
can we get this approximation in a way that is parallelizable? (Explain in
words, optionally along with pseudocode or equations.)

Hint: If c is close to 1, then 1 - c is close to 0. If you expand the recurrence
relation a bit, what happens to the contribution (to y[n]) of the terms y[n - k]
as k increases?

We know that y[n] = c * x[n] + (1 - c) * y[n - 1] for any n. Thus,
y[n - 1] = c * x[n - 1] + (1 - c) * y[n - 2]. Putting these together we get:
y[n] = c * x[n] + (1 - c) * c * x[n - 1] + (1 - c)^2 * y[n - 2].
Since c is close to 1, (1 - c)^2 is very small. We can further expand this term
and see that we obtain terms with (1 - c)^3, (1 - c)^4 and so on. Since we simply
want an approximation we can ignore these terms since they are even smaller.

Our approximation can be: y[n] \approx c * x[n] + (1 - c) * c * x[n - 1], which
can be implemented in an embarrassingly parallel manner.

================================================================================
Question 3: Small-Kernel Convolution (50 points)
================================================================================
'resources/example_test_out.wav' is theoutput file for 'resources/example_test.wav'
